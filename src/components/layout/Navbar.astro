---
import { Button } from "../ui/button";
import logobromo from '@/assets/logobromo.svg';
import tiktokIcon from '@/assets/tiktok.svg'
import { Menu } from "lucide-react";
import { Facebook, Instagram, Twitter } from "lucide-react";

// Add a prop to determine if we're on the homepage or not
const { isNotHomePage = false } = Astro.props;

// Format links based on context
const navLinks = [
  { href: isNotHomePage ? "/#home" : "#home", label: "Home" },
  { href: isNotHomePage ? "/#packages" : "#packages", label: "Packages" },
  { href: isNotHomePage ? "/#gallery" : "#gallery", label: "Gallery" },
  { href: isNotHomePage ? "/#testimonials" : "#testimonials", label: "Testimonials" },
  { href: isNotHomePage ? "/#terms" : "#terms", label: "Terms" },
  { href: isNotHomePage ? "/#contact" : "#contact", label: "Contact" },
];
---

<header class="fixed w-full bg-white z-50 shadow-sm">
  <div class="container mx-auto px-4 py-3">
    <div class="flex justify-between items-center">
      <!-- logo -->
      <a href="/" class="">
        <img src={logobromo.src} alt="Bromo Tour Logo" width="150" height="60" class="h-10 md:h-16 w-auto" />
      </a>
      
      <!-- Desktop Navigation -->
      <nav class="hidden md:flex items-center gap-6">
        {navLinks.map(link => (
          <a href={link.href} class="text-gray-700 hover:text-[#F68712] transition-colors font-medium">{link.label}</a>
        ))}
      </nav>
      
    
      <!-- Desktop Social Media Icons -->
      <div class="hidden md:flex items-center gap-4">
        <a href="#" class="p-2 rounded-full border border-black/10 hover:bg-[#F68712] hover:text-white transition-colors">
          <Facebook className="h-5 w-5" />
        </a>
        <a href="#" class="p-2 rounded-full border border-black/10 hover:bg-[#F68712] hover:text-white transition-colors">
          <Instagram className="h-5 w-5" />
        </a>
        <a href="#" class="p-2 rounded-full border border-black/10 hover:bg-[#F68712] hover:text-white transition-colors">
          <Twitter className="h-5 w-5" />
        </a>
        <a href="#" class="p-2 rounded-full border border-black/10 hover:bg-[#F68712] hover:text-white transition-colors">
          <img src={tiktokIcon.src} alt="TikTok Icon" class="h-5 w-5" />
        </a>
        <Button 
          className="bg-[#20513F] hover:bg-[#F68712]/90 text-white ml-2" 
          size="default"
        >
          Book Now
        </Button>
      </div>
      
      <!-- Mobile Menu Button -->
      <div class="md:hidden">
        <button id="mobile-menu-button" class="bg-[#F68712] hover:bg-[#F68712]/90 text-white p-2 rounded-md">
          <Menu className="h-6 w-6" />
          <span class="sr-only">Open menu</span>
        </button>
      </div>
    </div>
  </div>
    <!-- Green Container Below Navbar -->
    <div class="w-full bg-[#20513F] text-white">
      <div class="container mx-auto px-4 py-2 text-sm">
        <p class="font-light text-sm text-center">Got questions or need advice? Let's chat! <a href={isNotHomePage ? "/#contact" : "#contact"} class="underline hover:text-yellow-300 transition-colors">Free consultation here!</a></p>
      </div>
    </div>

  <!-- Mobile menu (separate from header structure) -->
  <div id="mobile-menu" class="fixed top-0 right-0 bottom-0 w-[280px] sm:w-[350px] bg-white shadow-xl transform translate-x-full transition-transform duration-300 ease-in-out z-50">
    <div class="flex flex-col h-full p-6">
      <!-- Close button -->
      <button id="mobile-menu-close" class="self-end p-2">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
        <span class="sr-only">Close menu</span>
      </button>
      
      <!-- Mobile nav logo -->
      <div class="mb-8 flex justify-center">
        <img src={logobromo.src} alt="Bromo Tour Logo" width="120" height="48" class="h-12 w-auto" />
      </div>
      
      <!-- Mobile navigation -->
      <nav class="flex flex-col items-center gap-6 mb-8">
        {navLinks.map(link => (
          <a 
            href={link.href} 
            class="text-xl hover:text-[#F68712] transition-colors mobile-nav-link"
          >
            {link.label}
          </a>
        ))}
      </nav>
      
      <!-- Booking button -->
      <div class="mt-auto mb-8">
        <Button 
          className="bg-[#20513F] hover:bg-[#F68712]/90 text-white w-full" 
          size="lg"
        >
          Book Now
        </Button>
      </div>

      <!-- Mobile Social Icons -->
      <div class="flex justify-center gap-4 mb-6">
        <a href="#" class="p-2 rounded-full border border-black/10 hover:bg-[#F68712] hover:text-white transition-colors">
          <Facebook className="h-5 w-5" />
        </a>
        <a href="#" class="p-2 rounded-full border border-black/10 hover:bg-[#F68712] hover:text-white transition-colors">
          <Instagram className="h-5 w-5" />
        </a>
        <a href="#" class="p-2 rounded-full border border-black/10 hover:bg-[#F68712] hover:text-white transition-colors">
          <Twitter className="h-5 w-5" />
        </a>
        <a href="#" class="p-2 rounded-full border border-black/10 hover:bg-[#F68712] hover:text-white transition-colors">
          <img src={tiktokIcon.src} alt="TikTok Icon" class="h-5 w-5" />
        </a>
      </div>
    </div>
  </div>
  
  <!-- Mobile menu backdrop -->
  <div id="mobile-backdrop" class="fixed inset-0 bg-black/25 backdrop-blur-sm opacity-0 pointer-events-none transition-opacity duration-300 ease-in-out z-40"></div>
</header>

<script define:vars={{ isNotHomePage }}>
  document.addEventListener('DOMContentLoaded', () => {
    // Mobile menu elements
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const mobileMenuClose = document.getElementById('mobile-menu-close');
    const mobileBackdrop = document.getElementById('mobile-backdrop');
    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
    
    // Open mobile menu
    mobileMenuButton?.addEventListener('click', () => {
      mobileMenu?.classList.remove('translate-x-full');
      mobileBackdrop?.classList.remove('opacity-0');
      mobileBackdrop?.classList.remove('pointer-events-none');
      document.body.style.overflow = 'hidden'; // Prevent scrolling
    });
    
    // Close mobile menu function
    const closeMenu = () => {
      mobileMenu?.classList.add('translate-x-full');
      mobileBackdrop?.classList.add('opacity-0');
      mobileBackdrop?.classList.add('pointer-events-none');
      document.body.style.overflow = ''; // Enable scrolling
    };
    
    // Close mobile menu events
    mobileMenuClose?.addEventListener('click', closeMenu);
    mobileBackdrop?.addEventListener('click', closeMenu);
    
    // Skip smooth scrolling logic on non-home pages for mobile links
    if (!isNotHomePage) {
      // Close menu when a link is clicked
      mobileNavLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          closeMenu();
          
          // Handle smooth scrolling
          const href = link.getAttribute('href');
          if (href) {
            const target = document.querySelector(href);
            if (target) {
              setTimeout(() => {
                window.scrollTo({
                  top: target instanceof HTMLElement ? target.offsetTop - 80 : 0,
                  behavior: 'smooth'
                });
              }, 300); // Wait for menu close animation
            }
          }
        });
      });
      
      // Smooth scrolling for all other anchor links
      document.querySelectorAll('a[href^="#"]:not(.mobile-nav-link)').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
          e.preventDefault();
          const href = this.getAttribute('href');
          if (href) {
            const target = document.querySelector(href);
            if (target) {
              window.scrollTo({
                top: target instanceof HTMLElement ? target.offsetTop - 80 : 0,
                behavior: 'smooth'
              });
            }
          }
        });
      });
    }
  });
</script>